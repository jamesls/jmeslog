#!/usr/bin/env python3
import argparse
import os
from pathlib import Path
import subprocess
import tempfile
import zipfile

REPO_ROOT = os.path.join(
    os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
)


def stage_release(args):
    output_file: str = str(args.output)
    with tempfile.TemporaryDirectory() as dirname:
        stage_dir = os.path.join(dirname, 'staged-release')
        os.makedirs(stage_dir)
        make_stage_dir(stage_dir)
        zip_stage_dir(dirname, output_file)


def make_stage_dir(stage_dir: str) -> None:
    """Create a stage directory and prepare it for a new release.

    This creates a new stage directory, clones the repository (locally),
    and then generates a new release for the repository, including
    git tags, version bumps, changelogs, etc.

    """
    repos_dir = Path(stage_dir) / 'repos'
    repos_dir.mkdir(parents=True, exist_ok=True)
    subprocess.run(
        ['git', 'clone', REPO_ROOT],
        cwd=repos_dir,
        check=True,
    )
    single_repo_dir = repos_dir / next(repos_dir.iterdir())
    next_release_type = subprocess.run(
        ['jmeslog', 'query', 'next-release-type'],
        cwd=single_repo_dir,
        capture_output=True,
        check=True,
        encoding='utf-8',
    ).stdout.strip()
    # Bump the version in the pyproject.toml config.
    subprocess.run(
        ['poetry', 'version', next_release_type],
        cwd=single_repo_dir,
        check=True,
    )
    new_version = subprocess.run(
        ['poetry', 'version', '--short'],
        capture_output=True,
        encoding='utf-8',
        check=True,
        cwd=single_repo_dir,
    ).stdout.strip()
    subprocess.run(
        ['jmeslog', 'new-release', '--release-version', new_version],
        cwd=single_repo_dir,
        check=True,
    )
    changelog_path = single_repo_dir / 'CHANGELOG.md'
    with changelog_path.open('w') as f:
        subprocess.run(
            ['jmeslog', 'render', '--template', 'CHANGELOG'],
            cwd=single_repo_dir,
            check=True,
            stdout=f,
        )
    subprocess.run(
        ['git', 'add', '-A', '.'],
        cwd=single_repo_dir,
        check=True,
    )
    subprocess.run(
        ['git', 'commit', '-a', '-m', f'Bumping version to {new_version}'],
        cwd=single_repo_dir,
        check=True,
    )
    subprocess.run(
        [
            'git',
            'tag',
            '-a',
            new_version,
            '-m',
            f'Tagging {new_version} release',
        ],
        check=True,
        cwd=single_repo_dir,
    )
    subprocess.run(['poetry', 'build'], cwd=single_repo_dir, check=True)


def zip_stage_dir(dirname: str, outfile: str):
    with zipfile.ZipFile(
        outfile, mode='w', compression=zipfile.ZIP_DEFLATED
    ) as z:
        for root, _, filenames in os.walk(dirname):
            for filename in filenames:
                full_path = os.path.join(root, filename)
                prefix_len = len(dirname) + 1
                relative_path = full_path[prefix_len:]
                z.write(full_path, relative_path)
    print(f"Zipfile written to: {outfile}")


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-o',
        '--output',
        default='staged-release.zip',
        help='Filename of staged zip file.',
    )
    args = parser.parse_args()
    stage_release(args)


if __name__ == '__main__':
    main()
